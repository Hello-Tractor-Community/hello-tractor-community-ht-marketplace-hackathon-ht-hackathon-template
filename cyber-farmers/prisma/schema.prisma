// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int      @id @default(autoincrement())
  firstName            String
  lastName             String
  email                String   @unique
  password             String
  phone                String   @unique
  role                 Role     @default(BUYER)
  profileImage         String?  @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUbmPFgBy6UtEH1yfcvXIH4rR_3y1Pe2iI8w&s")
  verified             Boolean  @default(false)
  newsletterSubscribed Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  listings             Listing[]       @relation("SellerListings")
  reviews              Review[]
  wishlistItems        Wishlist[]
  messagesSent         Message[]       @relation("MessagesSent")
  messagesReceived     Message[]       @relation("MessagesReceived")
  adminApprovals       AdminApproval[]
  salesTransactions    Transaction[]   @relation("SaleTransactions")
  purchaseTransactions Transaction[]   @relation("PurchaseTransactions")

  @@index([email, phone])
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

model Listing {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  category    Category
  images      String[]
  price       Float
  location    String
  age         Int
  hoursUsed   Int
  status      ListingStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sellerId       Int
  seller         User            @relation("SellerListings", fields: [sellerId], references: [id])
  reviews        Review[]
  transactions   Transaction[]
  specification  Specification?
  adminApprovals AdminApproval[]
  wishlistItems  Wishlist[]

  @@index([sellerId, status, category])
}

enum Category {
  TRACTOR
  FARMTOOL
  SPARE_PART
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  reviewerId    Int
  reviewer      User        @relation(fields: [reviewerId], references: [id])
  listingId     Int?
  listing       Listing?    @relation(fields: [listingId], references: [id])
  dealerId      Int?
  dealer        Dealer?     @relation(fields: [dealerId], references: [id])

  @@unique([transactionId])
  @@index([reviewerId, listingId, dealerId])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sentAt     DateTime @default(now())
  read       Boolean  @default(false)
  senderId   Int
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])

  @@index([senderId, receiverId])
}

model AdminApproval {
  id        Int            @id @default(autoincrement())
  status    ApprovalStatus @default(PENDING)
  createdAt DateTime       @default(now())

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  listingId Int?
  listing   Listing? @relation(fields: [listingId], references: [id])

  @@index([userId, listingId, status])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Dealer {
  id          Int      @id @default(autoincrement())
  name        String
  region      String
  contactInfo String
  services    String[]
  rating      Float    @default(0)
  reviews     Review[]
  promotions  String[]
  createdAt   DateTime @default(now())

  @@index([region])
}

model Transaction {
  id        Int               @id @default(autoincrement())
  price     Float
  status    TransactionStatus @default(COMPLETED)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id])
  buyerId   Int
  buyer     User    @relation("PurchaseTransactions", fields: [buyerId], references: [id])
  sellerId  Int
  seller    User    @relation("SaleTransactions", fields: [sellerId], references: [id])

  review Review?

  @@index([buyerId, sellerId, status])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id])

  @@unique([userId, listingId])
  @@index([userId])
}

model Specification {
  id              Int      @id @default(autoincrement())
  engineModel     String
  horsepower      Float
  fuelType        String
  transmission    String
  gears           Int
  weight          Float
  length          Float
  width           Float
  height          Float
  maxSpeed        Float
  fuelCapacity    Float
  hydraulicSystem String?
  pvtTakeoff      Boolean  @default(false)
  threePtHitch    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id])
}
